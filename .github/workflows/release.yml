name: Release

on:
  push:
    tags:
      - "*"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - uses: actions/checkout@v3

      - uses: goto-bus-stop/setup-zig@v2

      - uses: hecrj/setup-rust-action@master
        with:
          rust-version: stable

      - name: Check Cargo availability
        run: cargo --version

      - name: Check Rustup default toolchain
        run: rustup default | grep stable

      - name: Install cargo-deb
        run: cargo install cargo-deb

      - name: Install cargo-zigbuild
        run: cargo install cargo-zigbuild

      - name: Release build Linux-x86-64
        run: |
          rustup target add x86_64-unknown-linux-musl
          env RUSTFLAGS="-C strip=symbols" cargo zigbuild --release --target x86_64-unknown-linux-musl
          mkdir doh-proxy
          mv target/x86_64-unknown-linux-musl/release/doh-proxy doh-proxy/
          cp README.md localhost.pem doh-proxy/
          tar cJpf doh-proxy_${{ steps.get_version.outputs.VERSION }}_linux-x86_64.tar.bz2 doh-proxy
          rm -fr doh-proxy

      - name: Release build Linux-aarch64
        run: |
          rustup target add aarch64-unknown-linux-musl
          env RUSTFLAGS="-C strip=symbols" cargo zigbuild --release --target aarch64-unknown-linux-musl
          mkdir doh-proxy
          mv target/aarch64-unknown-linux-musl/release/doh-proxy doh-proxy/
          cp README.md localhost.pem doh-proxy/
          tar cJpf doh-proxy_${{ steps.get_version.outputs.VERSION }}_linux-aarch64.tar.bz2 doh-proxy
          rm -fr doh-proxy

      - name: Release build Windows-x86_64
        run: |
          rustup target add x86_64-pc-windows-gnu
          env RUSTFLAGS="-C strip=symbols" cargo zigbuild --release --target x86_64-pc-windows-gnu
          mkdir doh-proxy
          mv target/x86_64-pc-windows-gnu/release/doh-proxy.exe doh-proxy/
          cp README.md localhost.pem doh-proxy/
          zip -9 -r doh-proxy_${{ steps.get_version.outputs.VERSION }}_windows-x86_64.zip doh-proxy
          rm -fr doh-proxy

      - name: Debian package
        run: |
          rustup target add x86_64-unknown-linux-musl
          env \
            RUSTFLAGS="-C lto=yes -C strip=symbols" \
            __CARGO_TEST_CHANNEL_OVERRIDE_DO_NOT_USE_THIS=nightly \
            CARGO_UNSTABLE_TARGET_APPLIES_TO_HOST=true \
            CARGO_TARGET_APPLIES_TO_HOST=false \
            RANLIB="zig ranlib" \
            CARGO_LINKER="zig cc --target=x86_64-linux-musl" \
            CC="zig cc --target=x86_64-linux-musl" \
            CXX="zig c++ --target=x86_64-linux-musl" \
            cargo deb --target=x86_64-unknown-linux-musl

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

      - name: Upload Debian package
        id: upload-release-asset-debian
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_name: "doh-proxy_${{ steps.get_version.outputs.VERSION }}_amd64.deb"
          asset_path: "target/debian/doh-proxy_${{ steps.get_version.outputs.VERSION }}_amd64.deb"
          asset_content_type: application/x-debian-package

      - name: Upload tarball for linux-x86_64
        id: upload-release-asset-tarball-linux-x86_64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_name: "doh-proxy_${{ steps.get_version.outputs.VERSION }}_linux-x86_64.tar.bz2"
          asset_path: "doh-proxy_${{ steps.get_version.outputs.VERSION }}_linux-x86_64.tar.bz2"
          asset_content_type: application/x-tar

      - name: Upload tarball for linux-aarch64
        id: upload-release-asset-tarball-linux-aarch64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_name: "doh-proxy_${{ steps.get_version.outputs.VERSION }}_linux-aarch64.tar.bz2"
          asset_path: "doh-proxy_${{ steps.get_version.outputs.VERSION }}_linux-aarch64.tar.bz2"
          asset_content_type: application/x-tar

      - name: Upload tarball for windows-x86_64
        id: upload-release-asset-tarball-windows-x86_64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_name: "doh-proxy_${{ steps.get_version.outputs.VERSION }}_windows-x86_64.zip"
          asset_path: "doh-proxy_${{ steps.get_version.outputs.VERSION }}_windows-x86_64.zip"
          asset_content_type: application/zip
